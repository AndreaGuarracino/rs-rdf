var searchIndex = {};
searchIndex["rdf_rs"] = {"doc":"# rdf-rs","items":[[0,"uri","rdf_rs","",null,null],[3,"Uri","rdf_rs::uri","",null,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"fmt","","",0,null],[11,"new","","",0,{"inputs":[{"name":"string"}],"output":{"name":"uri"}}],[11,"to_string","","Returns the string representation of the URI.",0,null],[11,"append_resource_path","","todo",0,null],[0,"namespace","rdf_rs","",null,null],[3,"Namespace","rdf_rs::namespace","Representation of a specific namespace.",null,null],[3,"NamespaceStore","","Storage for multiple namespaces.",null,null],[11,"fmt","","",1,null],[11,"new","","`Namespace` constructor.",1,{"inputs":[{"name":"string"},{"name":"uri"}],"output":{"name":"namespace"}}],[11,"prefix","","Returns the prefix of the namespace.",1,null],[11,"uri","","Returns the URI of the namespace.",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"new","","Constructor for `NamespaceStore`.",2,{"inputs":[],"output":{"name":"namespacestore"}}],[11,"namespaces","","Returns the stored namespaces with prefixes.",2,null],[11,"add","","Adds a new namespace.",2,null],[11,"get_uri_by_prefix","","Returns the URI of a specific namespace.",2,null],[0,"node","rdf_rs","",null,null],[4,"Node","rdf_rs::node","Node representation.",null,null],[13,"UriNode","","Node for representing a URI.",3,null],[12,"uri","rdf_rs::node::Node","",3,null],[13,"LiteralNode","rdf_rs::node","Node for representing literals.",3,null],[12,"literal","rdf_rs::node::Node","",3,null],[12,"data_type","","",3,null],[12,"language","","",3,null],[13,"BlankNode","rdf_rs::node","Node for representing blanks.",3,null],[12,"id","rdf_rs::node::Node","",3,null],[11,"clone","rdf_rs::node","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"cmp","","",3,null],[11,"fmt","","",3,null],[0,"triple","rdf_rs","",null,null],[3,"Triple","rdf_rs::triple","Triple representation.",null,null],[3,"TripleStore","","Storage for triples.",null,null],[4,"TripleSegment","","Triple segment.",null,null],[13,"Subject","","",4,null],[13,"Predicate","","",4,null],[13,"Object","","",4,null],[11,"eq","","",4,null],[11,"fmt","","",4,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"new","","Constructor for Triple struct.",5,{"inputs":[{"name":"node"},{"name":"node"},{"name":"node"}],"output":{"name":"triple"}}],[11,"subject","","Returns a reference to the subject node of the triple.",5,null],[11,"predicate","","Returns a reference to the predicate node of the triple.",5,null],[11,"object","","Returns a reference to the object node of the triple.",5,null],[11,"eq","","",5,null],[11,"fmt","","",6,null],[11,"new","","Constructs a new triple store.",6,{"inputs":[],"output":{"name":"triplestore"}}],[11,"count","","Returns the number of triples that are stored.",6,null],[11,"is_empty","","Checks if the triple store is empty.",6,null],[11,"add_triple","","Adds a new triple to the store.",6,null],[11,"remove_triple","","Deletes the triple from the store.",6,null],[11,"get_triples_with_subject","","Returns all triples where the subject node matches the provided node.",6,null],[11,"get_triples_with_predicate","","Returns all triples where the predicate node matches the provided node.",6,null],[11,"get_triples_with_object","","Returns all triples where the object node matches the provided node.",6,null],[11,"get_triples_with_subject_and_object","","Returns all triples where the subject and object nodes match the provided nodes.",6,null],[11,"get_triples_with_subject_and_predicate","","Returns all triples where the subject and predicate nodes match the provided nodes.",6,null],[11,"get_triples_with_predicate_and_object","","Returns all triples where the predicate and object nodes match the provided nodes.",6,null],[11,"get_blank_nodes","","Returns all blank nodes of the store.",6,null],[11,"into_vec","","Returns the stored triples as vector.",6,null],[11,"iter","","Returns an iterator over the stored triples.",6,null],[11,"into_iter","","",6,null],[0,"graph","rdf_rs","",null,null],[3,"Graph","rdf_rs::graph","Representation of an RDF graph.",null,null],[11,"fmt","","",7,null],[11,"new","","Constructor for the RDF graph.",7,{"inputs":[{"name":"option"}],"output":{"name":"graph"}}],[11,"is_empty","","Returns `true` if the graph does not contain any triples.",7,null],[11,"count","","Returns the number of triples that are stored in the graph.",7,null],[11,"base_uri","","Returns the base URI of the graph.",7,null],[11,"set_base_uri","","Sets the base URI of the graph.",7,null],[11,"namespaces","","Returns a hash map of namespaces and prefixes.",7,null],[11,"add_namespace","","Adds a new namespace with a specific prefix to the graph.",7,null],[11,"get_namespace_uri_by_prefix","","Returns the URI of a namespace with the provided prefix.",7,null],[11,"create_literal_node","","Returns a literal node of the specified namespace.",7,null],[11,"create_literal_node_with_data_type","","Returns a literal node with a specified data type.",7,null],[11,"create_literal_node_with_language","","Returns a literal node with a specified language.",7,null],[11,"create_blank_node","","Creates a blank node with a unique ID.",7,null],[11,"create_blank_node_with_id","","Creates a blank node with the specified ID.",7,null],[11,"create_uri_node","","Creates a new URI node.",7,null],[11,"add_triple","","Adds a triple to the graph.",7,null],[11,"add_triples","","Adds a vector of triples.",7,null],[11,"remove_triple","","Deletes the triple from the graph.",7,null],[11,"get_triples_with_subject","","Returns all triples from the store that have the specified subject node.",7,null],[11,"get_triples_with_predicate","","Returns all triples from the store that have the specified predicate node.",7,null],[11,"get_triples_with_object","","Returns all triples from the store that have the specified object node.",7,null],[11,"get_triples_with_subject_and_object","","Returns all triples from the triple store where the subject and object nodes match the provided nodes.",7,null],[11,"get_triples_with_subject_and_predicate","","Returns all triples from the triple store where the subject and predicate nodes match the provided nodes.",7,null],[11,"get_triples_with_predicate_and_object","","Returns all triples from the triple store where the predicate and object nodes match the provided nodes.",7,null],[11,"triples_iter","","Returns an iterator over the triples of the graph.",7,null],[0,"error","rdf_rs","",null,null],[3,"Error","rdf_rs::error","An error related to the rdf-rs module.",null,null],[4,"ErrorType","","Different types of errors that can occur.",null,null],[13,"InvalidWriterOutput","","RDF writer produces invalid RDF (e.g. if invalid node types are provided).",8,null],[13,"InvalidReaderInput","","RDF lexer reads invalid RDF (e.g. non-closing string).",8,null],[13,"InvalidToken","","RDF reader reads an invalid token (e.g. invalid node type).",8,null],[13,"EndOfInput","","RDF reader reaches the end of the input and stores the characters that were read last.",8,null],[13,"InvalidByteEncoding","","Input reader encounters invalid byte encoding.",8,null],[13,"InvalidNamespace","","Incorrect namespace.",8,null],[11,"fmt","","",8,null],[11,"fmt","","",9,null],[11,"new","","Constructor of `Error`.",9,{"inputs":[{"name":"errortype"},{"name":"e"}],"output":{"name":"error"}}],[11,"error_type","","Returns the type of the error.",9,null],[11,"fmt","","",9,null],[11,"description","","",9,null],[0,"writer","rdf_rs","",null,null],[0,"formatter","rdf_rs::writer","",null,null],[0,"rdf_formatter","rdf_rs::writer::formatter","",null,null],[8,"RdfFormatter","rdf_rs::writer::formatter::rdf_formatter","Trait implemented by RDF formatters for formatting nodes.",null,null],[10,"format_node","","Determines the node and its corresponding format.",10,null],[10,"format_literal","","Formats a literal.",10,null],[10,"format_blank","","Formats the content of a blank node.",10,null],[10,"format_uri","","Formats a URI.",10,null],[0,"turtle_formatter","rdf_rs::writer::formatter","",null,null],[3,"TurtleFormatter","rdf_rs::writer::formatter::turtle_formatter","Formatter for formatting nodes to Turtle syntax.\nThis formatter is used by `TurtleWriter`.",null,null],[11,"new","","Constructor of `TurtleFormatter`.",11,{"inputs":[{"name":"hashmap"}],"output":{"name":"turtleformatter"}}],[11,"format_node","","Returns the corresponding Turtle formatting for a node.",11,null],[11,"format_literal","","Formats a literal to the corresponding Turtle syntax.",11,null],[11,"format_blank","","Formats the content of a blank node to the corresponding Turtle syntax.",11,null],[11,"format_uri","","Formats a URI to Turtle syntax.",11,null],[0,"n_triples_formatter","rdf_rs::writer::formatter","",null,null],[3,"NTriplesFormatter","rdf_rs::writer::formatter::n_triples_formatter","Formatter for formatting nodes to N-Triple syntax.\nThis formatter is used by `NTriplesWriter`.",null,null],[11,"new","","Constructor of `NTriplesFormatter`.",12,{"inputs":[],"output":{"name":"ntriplesformatter"}}],[11,"format_node","","Returns the corresponding N-Triple formatting for a node.",12,null],[11,"format_literal","","Formats a literal to the corresponding N-Triples syntax.",12,null],[11,"format_blank","","Formats the content of a blank node to the corresponding N-Triples syntax.",12,null],[11,"format_uri","","Formats a URI to N-Triples syntax.",12,null],[0,"rdf_writer","rdf_rs::writer","",null,null],[8,"RdfWriter","rdf_rs::writer::rdf_writer","Trait implemented by RDF writers to generate a specific syntax.",null,null],[10,"write_to_string","","Generates RDF syntax from a provided RDF graph and writes it to a string.\nReturns an error if invalid RDF would be generated.",13,null],[0,"turtle_writer","rdf_rs::writer","",null,null],[3,"TurtleWriter","rdf_rs::writer::turtle_writer","RDF writer to generate Turtle syntax.",null,null],[11,"write_to_string","","Generates the Turtle syntax for each triple stored in the provided graph.",14,null],[11,"new","","Constructor of `TurtleWriter`.",14,{"inputs":[{"name":"hashmap"}],"output":{"name":"turtlewriter"}}],[0,"n_triples_writer","rdf_rs::writer","",null,null],[3,"NTriplesWriter","rdf_rs::writer::n_triples_writer","RDF writer to generate N-Triples syntax.",null,null],[11,"write_to_string","","Generates the N-Triples syntax for each triple stored in the provided graph.",15,null],[11,"new","","Constructor of `NTriplesWriter`.",15,{"inputs":[],"output":{"name":"ntripleswriter"}}],[11,"triple_to_n_triples","","Generates the corresponding N-Triples syntax of the provided triple.",15,null],[11,"node_to_n_triples","","Converts a single node to its corresponding N-Triples representation.",15,null],[0,"reader","rdf_rs","",null,null],[0,"lexer","rdf_rs::reader","",null,null],[0,"token","rdf_rs::reader::lexer","",null,null],[4,"Token","rdf_rs::reader::lexer::token","Tokens are produces by RDF lexers.",null,null],[13,"Comment","","",16,null],[13,"Literal","","",16,null],[13,"LiteralWithUrlDatatype","","",16,null],[13,"LiteralWithQNameDatatype","","",16,null],[13,"LiteralWithLanguageSpecification","","",16,null],[13,"Uri","","",16,null],[13,"BlankNode","","",16,null],[13,"TripleDelimiter","","",16,null],[13,"PrefixDirective","","",16,null],[13,"BaseDirective","","",16,null],[13,"QName","","",16,null],[13,"Prefix","","",16,null],[13,"KeywordA","","",16,null],[13,"PredicateListDelimiter","","",16,null],[13,"ObjectListDelimiter","","",16,null],[13,"CollectionStart","","",16,null],[13,"CollectionEnd","","",16,null],[13,"UnlabeledBlankNodeStart","","",16,null],[13,"UnlabeledBlankNodeEnd","","",16,null],[13,"EndOfInput","","",16,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"clone","","",16,null],[0,"rdf_lexer","rdf_rs::reader::lexer","",null,null],[8,"RdfLexer","rdf_rs::reader::lexer::rdf_lexer","Trait implemented by RDF lexer.",null,null],[10,"new","","Constructor.",17,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[10,"get_next_token","","Determines the next token from the input.",17,null],[10,"peek_next_token","","",17,null],[0,"n_triples_lexer","rdf_rs::reader::lexer","",null,null],[3,"NTriplesLexer","rdf_rs::reader::lexer::n_triples_lexer","Produces tokens from NTriples input.",null,null],[11,"new","","Constructor for `NTriplesLexer`;",18,{"inputs":[{"name":"r"}],"output":{"name":"ntripleslexer"}}],[11,"get_next_token","","Determines the next token from the input.",18,null],[11,"peek_next_token","","Determines the next token without consuming it.",18,null],[0,"turtle_lexer","rdf_rs::reader::lexer","",null,null],[3,"TurtleLexer","rdf_rs::reader::lexer::turtle_lexer","Produces tokens from Turtle syntax input.",null,null],[11,"new","","Constructor for `TurtleLexer`.",19,{"inputs":[{"name":"r"}],"output":{"name":"turtlelexer"}}],[11,"get_next_token","","Determines the next token from the input and consumes the read input characters.",19,null],[11,"peek_next_token","","Determines the next token without consuming the input.",19,null],[0,"rdf_parser","rdf_rs::reader","",null,null],[8,"RdfParser","rdf_rs::reader::rdf_parser","Trait implemented by RDF parsers to generate a RDF graph from RDF syntax.",null,null],[10,"decode","","Generates an RDF graph from a provided RDF syntax.\nReturns an error if invalid RDF input is provided.",20,null],[0,"n_triples_parser","rdf_rs::reader","",null,null],[3,"NTriplesParser","rdf_rs::reader::n_triples_parser","RDF parser to generate an RDF graph from N-Triples syntax.",null,null],[11,"decode","","Generates an RDF graph from a string containing N-Triples syntax.",21,null],[11,"from_string","","Constructor of `NTriplesParser` from input string.",21,{"inputs":[{"name":"s"}],"output":{"name":"ntriplesparser"}}],[11,"from_reader","","Constructor of `NTriplesParser` from input reader.",21,{"inputs":[{"name":"r"}],"output":{"name":"ntriplesparser"}}],[0,"turtle_parser","rdf_rs::reader","",null,null],[3,"TurtleParser","rdf_rs::reader::turtle_parser","RDF parser to generate an RDF graph from Turtle syntax.",null,null],[11,"decode","","Generates an RDF graph from a string containing Turtle syntax.",22,null],[11,"from_string","","Constructor of `TurtleParser` from input string.",22,{"inputs":[{"name":"s"}],"output":{"name":"turtleparser"}}],[11,"from_reader","","Constructor of `TurtleParser` from input reader.",22,{"inputs":[{"name":"r"}],"output":{"name":"turtleparser"}}],[0,"input_reader","rdf_rs::reader","",null,null],[3,"InputReaderHelper","rdf_rs::reader::input_reader","Collection of several helper methods that can be used when reading input.",null,null],[3,"InputChars","","Represents a sequence of read input characters.",null,null],[3,"InputReader","","Reads input and transforms it to `InputChars`.",null,null],[11,"whitespace","","Returns `true` if the provided character is a whitespace.",23,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"line_break","","Returns `true` if the provided character is a line break.",23,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"node_delimiter","","Returns `true` if the provided character can be used to separate two nodes.",23,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"digit","","Returns `true` if the provided character is a digit.",23,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"fmt","","",24,null],[11,"clone","","",24,null],[11,"to_string","","",24,null],[11,"index","","",24,null],[11,"new","","",24,{"inputs":[{"name":"vec"}],"output":{"name":"inputchars"}}],[11,"to_vec","","",24,null],[11,"len","","",24,null],[11,"push","","",24,null],[11,"insert","","",24,null],[11,"remove","","",24,null],[11,"append","","",24,null],[11,"new","","Constructor for `InputReader`.",25,{"inputs":[{"name":"r"}],"output":{"name":"inputreader"}}],[11,"peek_next_k_chars","","Returns the next `k` characters but does not consume them.",25,null],[11,"peek_next_char","","Returns the next character but does not consume it.",25,null],[11,"peek_next_char_discard_leading_spaces","","Returns the next character that is not a whitespace but does not consume it.",25,null],[11,"get_next_char","","Returns the next character of an input source.",25,null],[11,"get_next_k_chars","","Returns the next `k` characters of an input source and consumes them.",25,null],[11,"get_next_char_discard_leading_spaces","","Returns the next character of an input source that is not a whitespace.",25,null],[11,"peek_until","","Returns all characters of a input source until a certain delimiter occurs but does not consume them.",25,null],[11,"peek_until_discard_leading_spaces","","Returns all characters without consuming them of a input source until a certain delimiter\noccurs and removes leading whitespaces.",25,null],[11,"get_until","","Returns all characters of a input source until a certain delimiter occurs.",25,null],[11,"get_until_discard_leading_spaces","","Returns all characters of a input source until a certain delimiter occurs and removes leading whitespaces.",25,null],[0,"specs","rdf_rs","",null,null],[0,"xml_specs","rdf_rs::specs","",null,null],[4,"XmlDataTypes","rdf_rs::specs::xml_specs","XML schema data types.",null,null],[13,"String","","",26,null],[13,"Decimal","","",26,null],[13,"Double","","",26,null],[13,"Boolean","","",26,null],[13,"Date","","",26,null],[13,"Long","","",26,null],[13,"Int","","",26,null],[13,"Integer","","",26,null],[11,"to_uri","","Returns a specific data type as URI.",26,null],[11,"to_string","","Returns a specific data type as string.",26,null],[0,"turtle_specs","rdf_rs::specs","",null,null],[3,"TurtleSpecs","rdf_rs::specs::turtle_specs","Contains specifications for validating turtle syntax.",null,null],[11,"is_plain_literal","","Checks if the provided literal is a plain literal that corresponds to the provided data type.",27,{"inputs":[{"name":"string"},{"name":"option"}],"output":{"name":"bool"}}],[11,"is_double_literal","","Checks if the provided literal is decimal.",27,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"is_integer_literal","","Checks if the provided literal is an integer.",27,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"is_boolean_literal","","Checks if the provided literal is a boolean.",27,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[0,"rdf_syntax_specs","rdf_rs::specs","",null,null],[3,"RdfSyntaxSpecs","rdf_rs::specs::rdf_syntax_specs","Contains general RDF specification rules and helpers.",null,null],[4,"RdfSyntaxDataTypes","","RDF Schema data types and vocabulary.",null,null],[13,"A","","",28,null],[13,"ListFirst","","",28,null],[13,"ListRest","","",28,null],[13,"ListNil","","",28,null],[11,"to_uri","","Returns a specific data type as URI.",28,null],[11,"to_string","","Returns a specific data type as string.",28,null],[11,"escape_literal","","Replaces all characters with their escaped counterparts.",29,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[6,"Result","rdf_rs","",null,null]],"paths":[[3,"Uri"],[3,"Namespace"],[3,"NamespaceStore"],[4,"Node"],[4,"TripleSegment"],[3,"Triple"],[3,"TripleStore"],[3,"Graph"],[4,"ErrorType"],[3,"Error"],[8,"RdfFormatter"],[3,"TurtleFormatter"],[3,"NTriplesFormatter"],[8,"RdfWriter"],[3,"TurtleWriter"],[3,"NTriplesWriter"],[4,"Token"],[8,"RdfLexer"],[3,"NTriplesLexer"],[3,"TurtleLexer"],[8,"RdfParser"],[3,"NTriplesParser"],[3,"TurtleParser"],[3,"InputReaderHelper"],[3,"InputChars"],[3,"InputReader"],[4,"XmlDataTypes"],[3,"TurtleSpecs"],[4,"RdfSyntaxDataTypes"],[3,"RdfSyntaxSpecs"]]};
initSearch(searchIndex);
